// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: query/query.proto

package query

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QueryService_PlaintextQuery_FullMethodName        = "/query.QueryService/PlaintextQuery"
	QueryService_RandomHintQuery_FullMethodName       = "/query.QueryService/RandomHintQuery"
	QueryService_ReplacementEntryQuery_FullMethodName = "/query.QueryService/ReplacementEntryQuery"
	QueryService_SetParityQuery_FullMethodName        = "/query.QueryService/SetParityQuery"
	QueryService_HintComputeTimeQuery_FullMethodName  = "/query.QueryService/HintComputeTimeQuery"
)

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryServiceClient interface {
	PlaintextQuery(ctx context.Context, in *PlaintextQueryMsg, opts ...grpc.CallOption) (*PlaintextResponse, error)
	RandomHintQuery(ctx context.Context, in *RandomHintQueryMsg, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RandomHintResponse], error)
	ReplacementEntryQuery(ctx context.Context, in *ReplacementEntryQueryMsg, opts ...grpc.CallOption) (*ReplacementEntryResponse, error)
	SetParityQuery(ctx context.Context, in *SetParityQueryMsg, opts ...grpc.CallOption) (*SetParityQueryResponse, error)
	HintComputeTimeQuery(ctx context.Context, in *HintComputeTimeQueryMsg, opts ...grpc.CallOption) (*HintComputeTimeResponse, error)
}

type queryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryServiceClient(cc grpc.ClientConnInterface) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) PlaintextQuery(ctx context.Context, in *PlaintextQueryMsg, opts ...grpc.CallOption) (*PlaintextResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PlaintextResponse)
	err := c.cc.Invoke(ctx, QueryService_PlaintextQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) RandomHintQuery(ctx context.Context, in *RandomHintQueryMsg, opts ...grpc.CallOption) (grpc.ServerStreamingClient[RandomHintResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &QueryService_ServiceDesc.Streams[0], QueryService_RandomHintQuery_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RandomHintQueryMsg, RandomHintResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QueryService_RandomHintQueryClient = grpc.ServerStreamingClient[RandomHintResponse]

func (c *queryServiceClient) ReplacementEntryQuery(ctx context.Context, in *ReplacementEntryQueryMsg, opts ...grpc.CallOption) (*ReplacementEntryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReplacementEntryResponse)
	err := c.cc.Invoke(ctx, QueryService_ReplacementEntryQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) SetParityQuery(ctx context.Context, in *SetParityQueryMsg, opts ...grpc.CallOption) (*SetParityQueryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetParityQueryResponse)
	err := c.cc.Invoke(ctx, QueryService_SetParityQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) HintComputeTimeQuery(ctx context.Context, in *HintComputeTimeQueryMsg, opts ...grpc.CallOption) (*HintComputeTimeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HintComputeTimeResponse)
	err := c.cc.Invoke(ctx, QueryService_HintComputeTimeQuery_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
// All implementations must embed UnimplementedQueryServiceServer
// for forward compatibility.
type QueryServiceServer interface {
	PlaintextQuery(context.Context, *PlaintextQueryMsg) (*PlaintextResponse, error)
	RandomHintQuery(*RandomHintQueryMsg, grpc.ServerStreamingServer[RandomHintResponse]) error
	ReplacementEntryQuery(context.Context, *ReplacementEntryQueryMsg) (*ReplacementEntryResponse, error)
	SetParityQuery(context.Context, *SetParityQueryMsg) (*SetParityQueryResponse, error)
	HintComputeTimeQuery(context.Context, *HintComputeTimeQueryMsg) (*HintComputeTimeResponse, error)
	mustEmbedUnimplementedQueryServiceServer()
}

// UnimplementedQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQueryServiceServer struct{}

func (UnimplementedQueryServiceServer) PlaintextQuery(context.Context, *PlaintextQueryMsg) (*PlaintextResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaintextQuery not implemented")
}
func (UnimplementedQueryServiceServer) RandomHintQuery(*RandomHintQueryMsg, grpc.ServerStreamingServer[RandomHintResponse]) error {
	return status.Errorf(codes.Unimplemented, "method RandomHintQuery not implemented")
}
func (UnimplementedQueryServiceServer) ReplacementEntryQuery(context.Context, *ReplacementEntryQueryMsg) (*ReplacementEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReplacementEntryQuery not implemented")
}
func (UnimplementedQueryServiceServer) SetParityQuery(context.Context, *SetParityQueryMsg) (*SetParityQueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetParityQuery not implemented")
}
func (UnimplementedQueryServiceServer) HintComputeTimeQuery(context.Context, *HintComputeTimeQueryMsg) (*HintComputeTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HintComputeTimeQuery not implemented")
}
func (UnimplementedQueryServiceServer) mustEmbedUnimplementedQueryServiceServer() {}
func (UnimplementedQueryServiceServer) testEmbeddedByValue()                      {}

// UnsafeQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServiceServer will
// result in compilation errors.
type UnsafeQueryServiceServer interface {
	mustEmbedUnimplementedQueryServiceServer()
}

func RegisterQueryServiceServer(s grpc.ServiceRegistrar, srv QueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QueryService_ServiceDesc, srv)
}

func _QueryService_PlaintextQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaintextQueryMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).PlaintextQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_PlaintextQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).PlaintextQuery(ctx, req.(*PlaintextQueryMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_RandomHintQuery_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RandomHintQueryMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QueryServiceServer).RandomHintQuery(m, &grpc.GenericServerStream[RandomHintQueryMsg, RandomHintResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type QueryService_RandomHintQueryServer = grpc.ServerStreamingServer[RandomHintResponse]

func _QueryService_ReplacementEntryQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplacementEntryQueryMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ReplacementEntryQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_ReplacementEntryQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ReplacementEntryQuery(ctx, req.(*ReplacementEntryQueryMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_SetParityQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetParityQueryMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).SetParityQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_SetParityQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).SetParityQuery(ctx, req.(*SetParityQueryMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_HintComputeTimeQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HintComputeTimeQueryMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).HintComputeTimeQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QueryService_HintComputeTimeQuery_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).HintComputeTimeQuery(ctx, req.(*HintComputeTimeQueryMsg))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryService_ServiceDesc is the grpc.ServiceDesc for QueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "query.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaintextQuery",
			Handler:    _QueryService_PlaintextQuery_Handler,
		},
		{
			MethodName: "ReplacementEntryQuery",
			Handler:    _QueryService_ReplacementEntryQuery_Handler,
		},
		{
			MethodName: "SetParityQuery",
			Handler:    _QueryService_SetParityQuery_Handler,
		},
		{
			MethodName: "HintComputeTimeQuery",
			Handler:    _QueryService_HintComputeTimeQuery_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RandomHintQuery",
			Handler:       _QueryService_RandomHintQuery_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "query/query.proto",
}
